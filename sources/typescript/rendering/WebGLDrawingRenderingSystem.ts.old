import { Pack } from '@cedric-demongivert/gl-tool-collection'

import { Matrix4f } from '@cedric-demongivert/gl-tool-math'
import { Vector4f } from '@cedric-demongivert/gl-tool-math'

import { Entity } from '@cedric-demongivert/gl-tool-ecs'

import { WebGLUniforms } from '@cedric-demongivert/gl-tool-shader'
import { WebGLAttributes } from '@cedric-demongivert/gl-tool-shader'
import { WebGLProgramCollection } from '@cedric-demongivert/gl-tool-shader'
import { ProgramIdentifier } from '@cedric-demongivert/gl-tool-shader'

import { WebGLGeometryCollection } from '@cedric-demongivert/gl-tool-buffer'
import { WebGLBufferUsage } from '@cedric-demongivert/gl-tool-buffer'

import { OverseerSystem } from '../OverseerSystem'
import { UnitManagementSystem } from '../UnitManagementSystem'
import { WebGLRenderingPass } from '../WebGLRenderingPass'
import { SquareGrid } from '../../components/SquareGrid'

import { Unit } from '../../components/Unit'

import { DrawingSystem } from './DrawingSystem'

export class WebGLDrawingRenderingSystem extends OverseerSystem {
  private _unitManagementSystem: UnitManagementSystem
  private _drawingSystem: DrawingSystem

  private readonly _attributes: WebGLAttributes
  private readonly _uniforms: WebGLUniforms

  private readonly _viewToWorld: Matrix4f
  private readonly _pixelSize: Vector4f

  /**
  * Create a new system that render meshes.
  */
  public constructor() {
    super()
    this._unitManagementSystem = null
    this._drawingSystem = null

    this._attributes = new WebGLAttributes()
    this._uniforms = new WebGLUniforms()

    this._viewToWorld = new Matrix4f()
    this._pixelSize = new Vector4f()
  }

  /**
  * @see gltool-ecs/System.initialize
  */
  public initialize(): void {
    this._unitManagementSystem = this.manager.requireSystem(UnitManagementSystem)
    this._drawingSystem = this.manager.requireSystem(DrawingSystem)
  }

  /**
  * @see gltool-ecs/System.destroy
  */
  public destroy(): void {
    this._unitManagementSystem = null
    this._drawingSystem = null
  }

  public computeViewToWorldMatrix(pass: WebGLRenderingPass, unit: Unit) {
    const viewUnit: Unit = this._unitManagementSystem.getUnit(pass.camera.entity)
    const gridUnit: Unit = unit

    this._viewToWorld.copy(pass.camera.data.viewToWorld)
    gridUnit.applyToMatrix(viewUnit, this._viewToWorld)
  }

  public computePixelDimension(pass: WebGLRenderingPass) {
    this._pixelSize.set(
      2.0 / pass.viewport.width,
      2.0 / pass.viewport.height,
      0,
      0
    )

    this._viewToWorld.multiplyWithVector(this._pixelSize)
  }

  public useSquareGridProgram(pass: WebGLRenderingPass, grid: SquareGrid): void {
    const programs: WebGLProgramCollection = pass.context.programs
    const program: ProgramIdentifier = this._programs.get(SQUARE_PROGRAM)

    programs.bootstrap(program)
    programs.use(program)

    const uniforms: WebGLUniforms = this._uniforms
    const attributes: WebGLAttributes = this._attributes

    uniforms.handle(pass.context.context, programs.getProgram(program))
    attributes.handle(pass.context.context, programs.getProgram(program))

    uniforms.setIfExists('viewToWorld', true, this._viewToWorld.buffer)
    uniforms.setIfExists('unit', grid.unit.buffer)
    uniforms.setIfExists('color', grid.color.buffer)
    uniforms.setIfExists('thickness', grid.thickness)
    uniforms.setIfExists('base', grid.base)
    uniforms.setIfExists('zoom', 0.0)
    uniforms.setIfExists('resolution', pass.viewport.width, pass.viewport.height)
    uniforms.setIfExists('pixelSize', this._pixelSize.x, this._pixelSize.y)
  }

  public useGridGeometry(pass: WebGLRenderingPass): void {
    const geometries: WebGLGeometryCollection = pass.context.geometries

    geometries.bootstrap(this._geometry, WebGLBufferUsage.STATIC_DRAW)
    geometries.bind(this._geometry)

    const attributes: WebGLAttributes = this._attributes

    for (const field of GridGeometry.FORMAT.fields) {
      if (attributes.attributes.has(field.name)) {
        geometries.upload(field, attributes.attributes.get(field.name).location)
      }
    }
  }

  public renderSquareGridWithWebGL(pass: WebGLRenderingPass, grid: SquareGrid, unit: Unit): void {
    const gl: WebGLRenderingContext = pass.context.context

    this.computeViewToWorldMatrix(pass, unit)
    this.computePixelDimension(pass)
    this.useSquareGridProgram(pass, grid)
    this.useGridGeometry(pass)

    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0)
  }

  /**
  * Render the given entity.
  *
  * @param pass - The rendering pass information.
  * @param entity - An entity to render as a mesh.
  */
  public renderEntityWithWebGL(pass: WebGLRenderingPass, entity: Entity): void {
    if (this.manager.hasComponent(entity, SquareGridType)) {
      this.renderSquareGridWithWebGL(
        pass,
        this.manager.getComponentOfEntity(entity, SquareGridType).data,
        this._unitManagementSystem.getUnit(entity)
      )
    }
  }
}
